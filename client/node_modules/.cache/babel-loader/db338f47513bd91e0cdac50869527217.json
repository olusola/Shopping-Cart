{"ast":null,"code":"import _defineProperty from \"/Users/akinolo/xxx/apps/mcart/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/akinolo/xxx/apps/mcart/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { ADD_TO_BASKET, REMOVE_FROM_BASKET, RESET_BASKET } from '../constants';\nvar initialState = {\n  'basket': {}\n};\n\nvar masterReducer = function masterReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_TO_BASKET:\n      return addToCart(state, action);\n\n    case REMOVE_FROM_BASKET:\n      return decreaseQuantity(state, action);\n\n    case RESET_BASKET:\n      return _objectSpread({}, state, {\n        basket: {}\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar decreaseQuantity = function decreaseQuantity(state, action) {\n  var productId = action.productId;\n  var basket = state.basket;\n\n  if (basket[productId]) {\n    if (basket[productId].quantity > 1) {\n      return _objectSpread({}, state, {\n        basket: _objectSpread({}, state.basket, _defineProperty({}, productId, _objectSpread({}, state.basket[productId], {\n          quantity: basket[productId].quantity -= 1\n        })))\n      });\n    } else {\n      var newState = Object.keys(basket).filter(function (itemKey) {\n        return productId !== itemKey;\n      }).reduce(function (obj, key) {\n        return _objectSpread({}, obj, _defineProperty({}, key, _objectSpread({}, basket[key])));\n      }, {});\n      return {\n        basket: newState\n      };\n    }\n  }\n\n  return state;\n};\n\nvar addToCart = function addToCart(state, action) {\n  var item = action.item;\n  var basket = state.basket;\n\n  if (basket[item.id]) {\n    return increaseQuantity(state, action);\n  } else {\n    return updateCart(state, action);\n  }\n};\n\nvar updateCart = function updateCart(state, action) {\n  var item = action.item;\n  var defaultQuantity = 0;\n\n  var cart = _objectSpread({}, state, {\n    basket: _objectSpread({}, state.basket, _defineProperty({}, item.id, _objectSpread({}, item, {\n      quantity: defaultQuantity + 1\n    })))\n  });\n\n  return cart;\n};\n\nvar increaseQuantity = function increaseQuantity(state, action) {\n  var item = action.item;\n  var basket = state.basket;\n  return _objectSpread({}, state, {\n    basket: _objectSpread({}, state.basket, _defineProperty({}, item.id, _objectSpread({}, item, {\n      quantity: basket[item.id].quantity += 1\n    })))\n  });\n};\n\nexport default masterReducer;","map":{"version":3,"sources":["/Users/akinolo/xxx/apps/mcart/client/src/redux/reducers/master.js"],"names":["ADD_TO_BASKET","REMOVE_FROM_BASKET","RESET_BASKET","initialState","masterReducer","state","action","type","addToCart","decreaseQuantity","basket","productId","quantity","newState","Object","keys","filter","itemKey","reduce","obj","key","item","id","increaseQuantity","updateCart","defaultQuantity","cart"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,kBAAxB,EAA4CC,YAA5C,QAAgE,cAAhE;AAEA,IAAMC,YAAY,GAAG;AAAC,YAAS;AAAV,CAArB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBF,YAAyB;AAAA,MAAXG,MAAW;;AACtD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,aAAL;AACE,aAAOQ,SAAS,CAACH,KAAD,EAAQC,MAAR,CAAhB;;AACF,SAAKL,kBAAL;AACE,aAAOQ,gBAAgB,CAACJ,KAAD,EAAQC,MAAR,CAAvB;;AACF,SAAKJ,YAAL;AACE,+BACKG,KADL;AAEEK,QAAAA,MAAM,EAAE;AAFV;;AAIF;AACA,aAAOL,KAAP;AAXF;AAaD,CAdD;;AAgBA,IAAMI,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACJ,KAAD,EAAQC,MAAR,EAAmB;AAAA,MAClCK,SADkC,GACpBL,MADoB,CAClCK,SADkC;AAAA,MAElCD,MAFkC,GAEvBL,KAFuB,CAElCK,MAFkC;;AAI1C,MAAIA,MAAM,CAACC,SAAD,CAAV,EAAuB;AACrB,QAAID,MAAM,CAACC,SAAD,CAAN,CAAkBC,QAAlB,GAA6B,CAAjC,EAAoC;AAClC,+BACKP,KADL;AAEEK,QAAAA,MAAM,oBACDL,KAAK,CAACK,MADL,sBAEHC,SAFG,oBAGCN,KAAK,CAACK,MAAN,CAAaC,SAAb,CAHD;AAIFC,UAAAA,QAAQ,EAAEF,MAAM,CAACC,SAAD,CAAN,CAAkBC,QAAlB,IAA6B;AAJrC;AAFR;AAUD,KAXD,MAWK;AACH,UAAMC,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYL,MAAZ,EAAoBM,MAApB,CAA2B,UAACC,OAAD,EAAa;AACvD,eAAON,SAAS,KAAKM,OAArB;AACD,OAFgB,EAEdC,MAFc,CAEP,UAACC,GAAD,EAAMC,GAAN,EAAY;AACpB,iCACKD,GADL,sBAEGC,GAFH,oBAEaV,MAAM,CAACU,GAAD,CAFnB;AAID,OAPgB,EAOf,EAPe,CAAjB;AAQA,aAAO;AAACV,QAAAA,MAAM,EAAEG;AAAT,OAAP;AACD;AACF;;AACD,SAAOR,KAAP;AACD,CA7BD;;AA+BA,IAAMG,SAAS,GAAG,SAAZA,SAAY,CAACH,KAAD,EAAQC,MAAR,EAAmB;AAAA,MAC3Be,IAD2B,GAClBf,MADkB,CAC3Be,IAD2B;AAAA,MAE3BX,MAF2B,GAEhBL,KAFgB,CAE3BK,MAF2B;;AAInC,MAAIA,MAAM,CAACW,IAAI,CAACC,EAAN,CAAV,EAAqB;AACnB,WAAOC,gBAAgB,CAAClB,KAAD,EAAQC,MAAR,CAAvB;AACD,GAFD,MAEK;AACH,WAAOkB,UAAU,CAACnB,KAAD,EAAQC,MAAR,CAAjB;AACD;AACF,CATD;;AAWA,IAAMkB,UAAU,GAAG,SAAbA,UAAa,CAACnB,KAAD,EAAQC,MAAR,EAAmB;AAAA,MAC5Be,IAD4B,GACnBf,MADmB,CAC5Be,IAD4B;AAEpC,MAAMI,eAAe,GAAG,CAAxB;;AAEA,MAAMC,IAAI,qBACLrB,KADK;AAERK,IAAAA,MAAM,oBACDL,KAAK,CAACK,MADL,sBAEHW,IAAI,CAACC,EAFF,oBAGCD,IAHD;AAIFT,MAAAA,QAAQ,EAAEa,eAAe,GAAG;AAJ1B;AAFE,IAAV;;AAUA,SAAOC,IAAP;AACD,CAfD;;AAiBA,IAAMH,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAClB,KAAD,EAAQC,MAAR,EAAmB;AAAA,MAClCe,IADkC,GACzBf,MADyB,CAClCe,IADkC;AAAA,MAElCX,MAFkC,GAEvBL,KAFuB,CAElCK,MAFkC;AAI1C,2BACKL,KADL;AAEEK,IAAAA,MAAM,oBACDL,KAAK,CAACK,MADL,sBAEHW,IAAI,CAACC,EAFF,oBAGCD,IAHD;AAIFT,MAAAA,QAAQ,EAAEF,MAAM,CAACW,IAAI,CAACC,EAAN,CAAN,CAAgBV,QAAhB,IAA2B;AAJnC;AAFR;AAUD,CAdD;;AAgBA,eAAeR,aAAf","sourcesContent":["import { ADD_TO_BASKET, REMOVE_FROM_BASKET, RESET_BASKET } from '../constants'\n\nconst initialState = {'basket':{}}\n\nconst masterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_TO_BASKET:\n      return addToCart(state, action)\n    case REMOVE_FROM_BASKET:\n      return decreaseQuantity(state, action)\n    case RESET_BASKET:\n      return {\n        ...state,\n        basket: {}\n      }\n    default: \n    return state\n  }\n}\n\nconst decreaseQuantity = (state, action) => {\n  const { productId } = action\n  const { basket } = state\n\n  if (basket[productId]) {\n    if (basket[productId].quantity > 1) {\n      return {\n        ...state,\n        basket: {\n          ...state.basket,\n          [productId]: {\n            ...state.basket[productId],\n            quantity: basket[productId].quantity -=1\n          }\n        }\n      }\n    }else{ \n      const newState = Object.keys(basket).filter((itemKey) => {\n        return productId !== itemKey\n      }).reduce((obj, key)=>{\n        return ({\n          ...obj,\n          [key]: {...basket[key]}\n        })\n      },{})\n      return {basket: newState}\n    }\n  }\n  return state\n}\n\nconst addToCart = (state, action) => {\n  const { item } = action\n  const { basket } = state\n\n  if (basket[item.id]) {\n    return increaseQuantity(state, action)\n  }else{\n    return updateCart(state, action)\n  }\n}\n\nconst updateCart = (state, action) => {\n  const { item } = action\n  const defaultQuantity = 0\n\n  const cart = {\n    ...state,\n    basket: {\n      ...state.basket,\n      [item.id]:{\n        ...item,\n        quantity: defaultQuantity + 1\n      }\n    }\n  }\n  return cart\n}\n\nconst increaseQuantity = (state, action) => {\n  const { item } = action\n  const { basket } = state\n\n  return {\n    ...state,\n    basket: {\n      ...state.basket,\n      [item.id]: {\n        ...item,\n        quantity: basket[item.id].quantity +=1\n      }\n    }\n  }\n}\n\nexport default masterReducer"]},"metadata":{},"sourceType":"module"}