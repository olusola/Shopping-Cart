{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.badValueMessage = badValueMessage;\nexports.ArgumentsOfCorrectType = ArgumentsOfCorrectType;\n\nvar _error = require('../../error');\n\nvar _printer = require('../../language/printer');\n\nvar _isValidLiteralValue = require('../../utilities/isValidLiteralValue');\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nfunction badValueMessage(argName, type, value, verboseErrors) {\n  var message = verboseErrors ? '\\n' + verboseErrors.join('\\n') : '';\n  return 'Argument \"' + argName + '\" has invalid value ' + value + '.' + message;\n}\n/**\n * Argument values of correct type\n *\n * A GraphQL document is only valid if all field argument literal values are\n * of the type expected by their position.\n */\n\n\nfunction ArgumentsOfCorrectType(context) {\n  return {\n    Argument: function Argument(node) {\n      var argDef = context.getArgument();\n\n      if (argDef) {\n        var errors = (0, _isValidLiteralValue.isValidLiteralValue)(argDef.type, node.value);\n\n        if (errors && errors.length > 0) {\n          context.reportError(new _error.GraphQLError(badValueMessage(node.name.value, argDef.type, (0, _printer.print)(node.value), errors), [node.value]));\n        }\n      }\n\n      return false;\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"script"}